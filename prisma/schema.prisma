// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
  binaryTargets   = ["native", "linux-musl", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Company {
  id                String              @id @default(cuid())
  vat               String              @unique
  country           String              @default("IT")
  profile           CompanyProfile?
  users             UsersCompanies[]
  RulesGroup        RulesGroup[]
  UsersRulesGroup   CompanyRulesGroup[]
  Autoscuole        Autoscuola[]
  tariffaTipo       TariffaTipo[]
  Tariffa           Tariffa[]
  Patente           Patente[]
  Veicolo           Veicolo[]
  PatentiOnVeicoli  PatentiOnVeicoli[]
  Workplace         Workplace[]
  Allievi           Allievo[]
  AllievoIstruzioni AllievoIstruzione[]
  AllievoServizio   AllievoServizio[]
  createdAt         DateTime?           @default(now())
}

model User {
  id                        String            @id @default(cuid())
  email                     String            @unique
  emailVerified             DateTime?
  image                     String?
  accounts                  Account[]
  profile                   UserProfile?
  profileId                 String?
  userPassword              UserPassword?
  companies                 UsersCompanies[]
  activeCompanyId           String?
  activeCompany             ActiveCompany?
  AllievoServizioIstruttore AllievoServizio[]
  createdAt                 DateTime?         @default(now())
}

model UsersCompanies {
  id                     String      @id @default(cuid())
  isActive               Boolean     @default(true)
  company                Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId              String
  user                   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String
  rulesGroup             RulesGroup? @relation(fields: [rulesGroupId], references: [id])
  rulesGroupId           String?
  appartenenza           String      @default("consorzio")
  autoscuolaAppartenenza String?
  createdAt              DateTime?   @default(now())
}

model UserPassword {
  id        String    @id @default(cuid())
  password  String
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
}

model UserProfile {
  id            String    @id @default(cuid())
  firstname     String?   @default("")
  lastname      String?   @default("")
  address       String?   @default("")
  addressNumber String?   @default("")
  zip           String?   @default("")
  city          String?   @default("")
  state         String?   @default("")
  country       String?   @default("")
  phone         String?   @default("")
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime? @default(now())
}

model CompanyProfile {
  id        String    @id @default(cuid())
  name      String
  companyId String    @unique
  comapny   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Rule {
  id          String  @id @default(cuid())
  companyId   String
  description String
  accessCode  String //like nextjs page folder
  recommended String?
  bgColor     String

  companyRulesGroup CompanyRulesGroup[]
  createdAt         DateTime?           @default(now())
}

model RulesGroup {
  id                String              @id @default(cuid())
  companyId         String
  company           Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  name              String
  description       String
  companyRulesGroup CompanyRulesGroup[]
  usersCompanies    UsersCompanies[]
  createdAt         DateTime?           @default(now())
}

model CompanyRulesGroup {
  id           String      @id @default(cuid())
  companyId    String
  company      Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  ruleId       String
  rule         Rule        @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  rulesGroup   RulesGroup? @relation(fields: [rulesGroupId], references: [id], onDelete: Cascade)
  rulesGroupId String?
  createdAt    DateTime?   @default(now())
}

model ActiveCompany {
  id        String    @id @default(cuid())
  isActive  String
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())
}

model Patente {
  id        String  @id @default(cuid())
  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  nome      String

  Tariffe           Tariffa[]
  Veicoli           PatentiOnVeicoli[]
  AllievoIstruzioni AllievoIstruzione[]
  createdAt         DateTime?           @default(now())
}

model Autoscuola {
  id                 String    @default(cuid())
  companyId          String
  company            Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  codMotorizzazione  String    @map("cod_motorizzazione")
  denominazione      String?
  consorzioToggle    Boolean?  @default(true) @map("consorzio_toggle")
  ragSoc             String?   @map("rag_soc")
  provincia          String?
  comune             String?
  indirizzo          String?
  nCiv               String?   @map("n_civ")
  codFisc            String?   @map("cod_fisc")
  partIva            String?   @map("part_iva")
  tel1               String?   @map("tel_1")
  tel2               String?   @map("tel_2")
  cel                String?
  fax                String?
  email              String?
  pec                String?
  sdi                String?
  iban               String?
  note               String?
  limitePrenotazioni Int?      @default(5)
  isActive           Boolean?  @default(true)
  Allievi            Allievo[]
  createdAt          DateTime? @default(now())

  @@id([id])
}

model TariffaTipo {
  id        String    @id @default(cuid())
  companyId String
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tipo      String
  tipo_cod  String
  Tariffe   Tariffa[]
  createdAt DateTime? @default(now())
}

model Tariffa {
  id              String            @id @default(cuid())
  companyId       String
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tariffaTipoId   String
  tipo            TariffaTipo       @relation(fields: [tariffaTipoId], references: [id], onDelete: Cascade)
  patenteId       String
  patente         Patente           @relation(fields: [patenteId], references: [id], onDelete: Cascade)
  prezzo          Decimal
  isActive        Boolean           @default(true)
  AllievoServizio AllievoServizio[]
  createdAt       DateTime?         @default(now())
}

model Workplace {
  id        String    @id @default(cuid())
  companyId String
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  nome      String
  isActive  Boolean   @default(true)
  Veicoli   Veicolo[]
  createdAt DateTime? @default(now())
}

model Veicolo {
  id                    String             @id @default(cuid())
  companyId             String
  company               Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  nome                  String
  targa                 String
  modello               String
  immatricolazione      DateTime
  scadenzaRevisione     DateTime
  scadenzaAssicurazione DateTime
  scadenzaBollo         DateTime
  isActive              Boolean            @default(true)
  workplaceId           String
  workplace             Workplace          @relation(fields: [workplaceId], references: [id], onDelete: Cascade)
  Patenti               PatentiOnVeicoli[]
  AllievoServizio       AllievoServizio[]
  createdAt             DateTime?          @default(now())
}

// model VeicoloImpegno {
//   id String @id @default(cuid())
//   companyId          String
//   company            Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
//   veicoloId String
//   veicolo Veicolo @relation(fields: [veicoloId], references: [id], onDelete: Restrict)
//   dataservizio DateTime
//   servizio AllievoServizio @relation(fields: [dataservizio], references: [dataServizio], onDelete: Restrict)

// }

model PatentiOnVeicoli {
  companyId String
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  patenteId String
  patente   Patente   @relation(fields: [patenteId], references: [id], onDelete: Cascade)
  veicoloId String
  veicolo   Veicolo   @relation(fields: [veicoloId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now())

  @@id([companyId, patenteId, veicoloId])
}

model Allievo {
  id                   String              @default(cuid())
  companyId            String
  company              Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  autoscuolaId         String
  autoscuola           Autoscuola          @relation(fields: [autoscuolaId], references: [id])
  codFisc              String
  nome                 String?
  cognome              String?
  iscrizioneNumero     String?
  iscrizioneData       DateTime?
  codiceMeccanografico String?
  nascitaLuogo         String?
  nascitaData          DateTime?
  genere               String?
  indirizzo            String?
  provincia            String?
  comune               String?
  cap                  String?
  tel                  String?
  email                String?
  AllievoIstruzioni    AllievoIstruzione[]
  createdAt            DateTime?           @default(now())

  @@id([id])
}

model AllievoIstruzione {
  id                   String            @default(cuid())
  companyId            String
  company              Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  patenteId            String
  patente              Patente           @relation(fields: [patenteId], references: [id], onDelete: Cascade)
  allievoId            String
  allievo              Allievo           @relation(fields: [allievoId], references: [id], onDelete: Cascade)
  //Se un corso e quindi non c'è il folgio rosa riempire marcaOperativa con data del corso
  marcaOperativa       String
  dataEsame            String?
  foglioRosaRilascio   DateTime?
  foglioRosaScadenza   DateTime?
  codiceStatino        String?
  istruzioneCompletata Boolean           @default(false)
  AllievoServizi       AllievoServizio[]
  createdAt            DateTime?         @default(now())

  @@id([id])
}

model AllievoServizio {
  id                  String            @id @default(cuid())
  companyId           String
  company             Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  allievoIStruzioneId String
  AllievoIstruzione   AllievoIstruzione @relation(fields: [allievoIStruzioneId], references: [id], onDelete: Restrict)
  tariffaId           String
  tariffa             Tariffa           @relation(fields: [tariffaId], references: [id], onDelete: Restrict)
  inizioServizio      Decimal?
  fineServizio        Decimal?
  durataMinuti        Int?
  veicoloId           String?
  veicolo             Veicolo?          @relation(fields: [veicoloId], references: [id], onDelete: Restrict)
  istruttoreId        String?
  istruttore          User?             @relation(fields: [istruttoreId], references: [id], onDelete: Restrict)
  esito               String?
  createdFrom         String?           @default("consorzio")
  createdAt           DateTime?         @default(now())
}
