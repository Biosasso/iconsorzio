generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
  binaryTargets   = ["native", "linux-musl", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                String              @id @default(cuid())
  vat               String              @unique
  country           String              @default("IT")
  createdAt         DateTime?           @default(now())
  Allievi           Allievo[]
  AllievoIstruzioni AllievoIstruzione[]
  AllievoServizio   AllievoServizio[]
  Autoscuole        Autoscuola[]
  profile           CompanyProfile?
  UsersRulesGroup   CompanyRulesGroup[]
  Patente           Patente[]
  PatentiOnVeicoli  PatentiOnVeicoli[]
  RulesGroup        RulesGroup[]
  Tariffa           Tariffa[]
  tariffaTipo       TariffaTipo[]
  users             UsersCompanies[]
  Veicolo           Veicolo[]
  Workplace         Workplace[]
}

model User {
  id                        String            @id @default(cuid())
  email                     String            @unique
  emailVerified             DateTime?
  image                     String?
  profileId                 String?
  activeCompanyId           String?
  createdAt                 DateTime?         @default(now())
  accounts                  Account[]
  activeCompany             ActiveCompany?
  AllievoServizioIstruttore AllievoServizio[]
  userPassword              UserPassword?
  profile                   UserProfile?
  companies                 UsersCompanies[]
}

model UsersCompanies {
  id                     String      @id @default(cuid())
  userId                 String
  companyId              String
  isActive               Boolean     @default(true)
  rulesGroupId           String?
  appartenenza           String      @default("consorzio")
  autoscuolaAppartenenza String?
  createdAt              DateTime?   @default(now())
  company                Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  rulesGroup             RulesGroup? @relation(fields: [rulesGroupId], references: [id])
  user                   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPassword {
  id        String    @id @default(cuid())
  password  String
  userId    String    @unique
  createdAt DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id            String    @id @default(cuid())
  firstname     String?   @default("")
  lastname      String?   @default("")
  address       String?   @default("")
  addressNumber String?   @default("")
  zip           String?   @default("")
  city          String?   @default("")
  state         String?   @default("")
  country       String?   @default("")
  phone         String?   @default("")
  userId        String    @unique
  createdAt     DateTime? @default(now())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CompanyProfile {
  id        String    @id @default(cuid())
  name      String
  companyId String    @unique
  createdAt DateTime? @default(now())
  comapny   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Rule {
  id                String              @id @default(cuid())
  description       String
  recommended       String?
  bgColor           String
  companyId         String
  accessCode        String
  createdAt         DateTime?           @default(now())
  companyRulesGroup CompanyRulesGroup[]
}

model RulesGroup {
  id                String              @id @default(cuid())
  companyId         String
  name              String
  description       String
  createdAt         DateTime?           @default(now())
  company           Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyRulesGroup CompanyRulesGroup[]
  usersCompanies    UsersCompanies[]
}

model CompanyRulesGroup {
  id           String      @id @default(cuid())
  companyId    String
  ruleId       String
  rulesGroupId String?
  createdAt    DateTime?   @default(now())
  company      Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  rule         Rule        @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  rulesGroup   RulesGroup? @relation(fields: [rulesGroupId], references: [id], onDelete: Cascade)
}

model ActiveCompany {
  id        String    @id @default(cuid())
  isActive  String
  userId    String    @unique
  createdAt DateTime? @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Patente {
  id                String              @id @default(cuid())
  companyId         String
  createdAt         DateTime?           @default(now())
  nome              String
  company           Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  AllievoIstruzioni AllievoIstruzione[]
  Veicoli           PatentiOnVeicoli[]
  Tariffe           Tariffa[]
}

model Autoscuola {
  id                 String    @id @default(cuid())
  companyId          String
  denominazione      String?
  consorzioToggle    Boolean?  @default(true) @map("consorzio_toggle")
  ragSoc             String?   @map("rag_soc")
  provincia          String?
  comune             String?
  indirizzo          String?
  nCiv               String?   @map("n_civ")
  codFisc            String?   @map("cod_fisc")
  partIva            String?   @map("part_iva")
  codMotorizzazione  String    @map("cod_motorizzazione")
  tel1               String?   @map("tel_1")
  tel2               String?   @map("tel_2")
  cel                String?
  fax                String?
  email              String?
  pec                String?
  sdi                String?
  iban               String?
  note               String?
  isActive           Boolean?  @default(true)
  limitePrenotazioni Int?      @default(5)
  createdAt          DateTime? @default(now())
  company            Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Allievi            Allievo[]
}

model TariffaTipo {
  id        String    @id @default(cuid())
  companyId String
  tipo      String
  tipo_cod  String
  createdAt DateTime? @default(now())
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Tariffe   Tariffa[]
}

model Tariffa {
  id              String            @id @default(cuid())
  tariffaTipoId   String
  prezzo          Decimal
  isActive        Boolean           @default(true)
  companyId       String
  createdAt       DateTime?         @default(now())
  patenteId       String
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  patente         Patente           @relation(fields: [patenteId], references: [id], onDelete: Cascade)
  tipo            TariffaTipo       @relation(fields: [tariffaTipoId], references: [id], onDelete: Cascade)
  AllievoServizio AllievoServizio[]
}

model Workplace {
  id        String    @id @default(cuid())
  companyId String
  nome      String
  isActive  Boolean   @default(true)
  createdAt DateTime? @default(now())
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Veicoli   Veicolo[]
}

model Veicolo {
  id                    String             @id @default(cuid())
  companyId             String
  nome                  String
  targa                 String
  modello               String
  immatricolazione      DateTime
  scadenzaRevisione     DateTime
  scadenzaAssicurazione DateTime
  scadenzaBollo         DateTime
  isActive              Boolean            @default(true)
  createdAt             DateTime?          @default(now())
  workplaceId           String
  company               Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  workplace             Workplace          @relation(fields: [workplaceId], references: [id], onDelete: Cascade)
  AllievoServizio       AllievoServizio[]
  Patenti               PatentiOnVeicoli[]
}

model PatentiOnVeicoli {
  companyId String
  patenteId String
  veicoloId String
  createdAt DateTime? @default(now())
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  patente   Patente   @relation(fields: [patenteId], references: [id], onDelete: Cascade)
  veicolo   Veicolo   @relation(fields: [veicoloId], references: [id], onDelete: Cascade)

  @@id([companyId, patenteId, veicoloId])
}

model Allievo {
  id                   String              @id @default(cuid())
  companyId            String
  autoscuolaId         String
  iscrizioneNumero     String?
  iscrizioneData       DateTime?
  codiceMeccanografico String?
  nome                 String?
  cognome              String?
  nascitaLuogo         String?
  nascitaData          DateTime?
  genere               String?
  codFisc              String
  indirizzo            String?
  provincia            String?
  comune               String?
  cap                  String?
  tel                  String?
  email                String?
  createdAt            DateTime?           @default(now())
  autoscuola           Autoscuola          @relation(fields: [autoscuolaId], references: [id])
  company              Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  AllievoIstruzioni    AllievoIstruzione[]
}

model AllievoIstruzione {
  companyId            String
  patenteId            String
  allievoId            String
  marcaOperativa       String
  dataEsame            String?
  foglioRosaRilascio   DateTime?
  foglioRosaScadenza   DateTime?
  codiceStatino        String?
  createdAt            DateTime?         @default(now())
  id                   String            @id @default(cuid())
  istruzioneCompletata Boolean           @default(false)
  allievo              Allievo           @relation(fields: [allievoId], references: [id], onDelete: Cascade)
  company              Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  patente              Patente           @relation(fields: [patenteId], references: [id], onDelete: Cascade)
  AllievoServizi       AllievoServizio[]
}

model AllievoServizio {
  companyId           String
  tariffaId           String
  durataMinuti        Int?
  istruttoreId        String?
  esito               String?
  allievoIStruzioneId String
  id                  String            @id @default(cuid())
  veicoloId           String?
  fineServizio        Decimal?
  inizioServizio      Decimal?
  createdAt           DateTime?         @default(now())
  createdFrom         String?           @default("consorzio")
  AllievoIstruzione   AllievoIstruzione @relation(fields: [allievoIStruzioneId], references: [id])
  company             Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  istruttore          User?             @relation(fields: [istruttoreId], references: [id], onDelete: Restrict)
  tariffa             Tariffa           @relation(fields: [tariffaId], references: [id])
  veicolo             Veicolo?          @relation(fields: [veicoloId], references: [id], onDelete: Restrict)
}
// Vercel rebuild trigger - $(date)